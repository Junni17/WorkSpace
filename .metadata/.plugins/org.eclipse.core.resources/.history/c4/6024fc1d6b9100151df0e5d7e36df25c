package gui;

import java.time.LocalDate;
import java.util.ArrayList;

import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.stage.Modality;
import javafx.stage.Stage;
import model.Conference;
import model.Excursion;
import service.Service;

public class ConferenceAdministration extends Stage {

	public ConferenceAdministration(Stage owner) {
		this.initOwner(owner);
		this.initModality(Modality.APPLICATION_MODAL);
		this.setResizable(false);

		this.setTitle("Create Conference");
		BorderPane pane = new BorderPane();
		this.initContent(pane);

		Scene scene = new Scene(pane);
		this.setScene(scene);
	}

	private TextField name;
	private TextField price;
	private DatePicker startDate;
	private DatePicker endDate;
	private ArrayList<Excursion> arrExcursions = new ArrayList<>();
	private ListView<Excursion> listExcursions;
	private Label lblError;

	private void initContent(BorderPane pane) {
		GridPane paneInfo = new GridPane();
		paneInfo.setHgap(20);
		paneInfo.setVgap(10);
		paneInfo.setPadding(new Insets(20));

		pane.setLeft(paneInfo);

		Label lblCreate = new Label("Create Conference");
		paneInfo.add(lblCreate, 1, 0);

		this.name = new TextField();
		paneInfo.add(this.name, 1, 1);

		this.price = new TextField();
		paneInfo.add(this.price, 1, 2);

		this.startDate = new DatePicker();
		paneInfo.add(this.startDate, 1, 3);

		this.endDate = new DatePicker();
		paneInfo.add(this.endDate, 1, 4);

		Label lblName = new Label("Name:");
		paneInfo.add(lblName, 0, 1);

		Label lblPrice = new Label("Price:");
		paneInfo.add(lblPrice, 0, 2);

		Label lblstartDate = new Label("Start Date");
		paneInfo.add(lblstartDate, 0, 3);

		Label lblendDate = new Label("End Date");
		paneInfo.add(lblendDate, 0, 4);

		Label lblExcursions = new Label("Excursions:");
		paneInfo.add(lblExcursions, 0, 5);

		this.listExcursions = new ListView<Excursion>();
		this.listExcursions.setPrefHeight(200);
		this.listExcursions.setPrefWidth(200);
		paneInfo.add(this.listExcursions, 1, 5);

		Button btnAddExcursion = new Button("Add");
		btnAddExcursion.setPrefWidth(60);
		btnAddExcursion.setOnAction(event -> this.controller.addAction());
		paneInfo.add(btnAddExcursion, 1, 6);

		Button btnOK = new Button("OK");
		btnOK.setPrefWidth(60);
		btnOK.setOnAction(event -> this.controller.okAction());

		Button btnCancel = new Button("Cancel");
		btnCancel.setPrefWidth(60);
		btnCancel.setOnAction(event -> this.controller.cancelAction());

		this.lblError = new Label();
		paneInfo.add(this.lblError, 1, 7);

		HBox btnBox = new HBox();
		btnBox.setSpacing(15);
		btnBox.getChildren().add(btnOK);
		btnBox.getChildren().add(btnCancel);
		paneInfo.add(btnBox, 1, 8);

	}

	public Conference getConference() {
		return this.controller.conference;
	}

	public boolean getResult() {
		return this.controller.result;
	}

	private Controller controller = new Controller();

	private class Controller {

		private Conference conference;

		private boolean result = false;

		private void okAction() {

			String name = ConferenceAdministration.this.name.getText();
			if (name.length() == 0){
				ConferenceAdministration.this.lblError.setText("Name is empty");
			}
			
			LocalDate startDate = ConferenceAdministration.this.startDate.getValue();
			LocalDate endDate = ConferenceAdministration.this.endDate.getValue();

			int price = -1;
			try {
				price = Integer.parseInt(ConferenceAdministration.this.price.getText());
			} catch (NumberFormatException ex) {
				// do nothing
			}
			if (price < 0) {
				ConferenceAdministration.this.lblError.setText("Price is not a positive number");
				return;
			}

			this.conference = Service.createConference(name, price, startDate, endDate);

			for (Excursion excursion : ConferenceAdministration.this.arrExcursions) {
				Service.setConferenceOfExcursion(excursion, this.conference);
			}

			this.result = true;

			ConferenceAdministration.this.hide();

		}

		private void addAction() {
			Stage stage = (Stage) ConferenceAdministration.this.getScene().getWindow();

			ExcursionAdministration dialog = new ExcursionAdministration(stage);
			dialog.showAndWait();

			if (dialog.getResult()) {
				Excursion temp = dialog.returnResult();

				ConferenceAdministration.this.arrExcursions.add(temp);
				ConferenceAdministration.this.listExcursions.getItems()
						.setAll(ConferenceAdministration.this.arrExcursions);
			}
		}

		private void cancelAction() {
			ConferenceAdministration.this.hide();
		}

	}

}
