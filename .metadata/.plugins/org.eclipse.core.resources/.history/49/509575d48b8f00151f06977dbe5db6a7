package gui;

import java.util.Optional;

import javafx.beans.value.ChangeListener;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.geometry.VPos;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;
import model.Company;
import model.Employee;
import service.Service;
import storage.Storage;

public class CompanyPane extends GridPane
{
    private Controller controller = new Controller();

    public CompanyPane()
    {
        this.initContent();
        Service.initStorage();
    }

    //-------------------------------------------------------------------------

    private TextField txfName, txfHours;
    private TextArea txaEmps;
    private ListView<Company> lvwCompanies;

    private void initContent()
    {
        this.setPadding(new Insets(20));
        this.setHgap(20);
        this.setVgap(10);
        this.setGridLinesVisible(false);

        Label lblComp = new Label("Companies");
        this.add(lblComp, 0, 0);

        lvwCompanies = new ListView<>();
        this.add(lvwCompanies, 0, 1, 1, 3);
        lvwCompanies.setPrefWidth(200);
        lvwCompanies.setPrefHeight(200);
        lvwCompanies.getItems().setAll(Storage.getAllCompanies());

        ChangeListener<Company> listener = (ov, oldCompny, newCompany) -> controller
                .selectedCompanyChanged();
        lvwCompanies.getSelectionModel().selectedItemProperty().addListener(listener);

        Label lblName = new Label("Name:");
        this.add(lblName, 1, 1);

        txfName = new TextField();
        this.add(txfName, 2, 1);
        txfName.setEditable(false);

        Label lblHours = new Label("Weekly Hours:");
        this.add(lblHours, 1, 2);

        txfHours = new TextField();
        this.add(txfHours, 2, 2);
        txfHours.setEditable(false);

        Label lblEmps = new Label("Employees:");
        this.add(lblEmps, 1, 3);
        GridPane.setValignment(lblEmps, VPos.BASELINE);
        lblEmps.setPadding(new Insets(4, 0, 4, 0));

        txaEmps = new TextArea();
        this.add(txaEmps, 2, 3);
        txaEmps.setPrefWidth(200);
        txaEmps.setPrefHeight(100);
        txaEmps.setEditable(false);

        HBox hbxButtons = new HBox(40);
        this.add(hbxButtons, 0, 4, 3, 1);
        hbxButtons.setPadding(new Insets(10, 0, 0, 0));
        hbxButtons.setAlignment(Pos.BASELINE_CENTER);

        Button btnCreate = new Button("Create");
        hbxButtons.getChildren().add(btnCreate);
        btnCreate.setOnAction(event -> controller.createAction());

        Button btnUpdate = new Button("Update");
        hbxButtons.getChildren().add(btnUpdate);
        btnUpdate.setOnAction(event -> controller.updateAction());

        Button btnDelete = new Button("Delete");
        hbxButtons.getChildren().add(btnDelete);
        btnDelete.setOnAction(event -> controller.deleteAction());

        if (lvwCompanies.getItems().size() > 0) {
            lvwCompanies.getSelectionModel().select(0);
        }
    }

    /**
     * Updates the content of controls in this pane.
     */
    public void updateControls()
    {
        controller.updateControls();
    }

    // -------------------------------------------------------------------------

    private class Controller
    {
        private CompanyDialog createDialog, updateDialog;
        private Alert deleteAlert;

        public void updateControls()
        {
            Company company = lvwCompanies.getSelectionModel().getSelectedItem();
            if (company != null) {
                txfName.setText(company.getName());
                txfHours.setText("" + company.getHours());
                StringBuilder sb = new StringBuilder();
                for (Employee emp : company.getEmployees()) {
                    sb.append(emp + "\n");
                }
                txaEmps.setText(sb.toString());
            } else {
                txfName.clear();
                txfHours.clear();
                txaEmps.clear();
            }
        }

        // --------------------------------------------------------------------

        // Create button action.
        public void createAction()
        {
            if (createDialog == null) {
                createDialog = new CompanyDialog("Create Company");
                Stage stage = (Stage) lvwCompanies.getScene().getWindow();
                createDialog.initOwner(stage);
            }

            createDialog.setCompany(null);
            createDialog.showAndWait();
            // ... wait for the dialog to close

            boolean isCreated = createDialog.getResult();
            if (isCreated) {
                lvwCompanies.getItems().setAll(Storage.getAllCompanies());
                int index = lvwCompanies.getItems().size() - 1;
                lvwCompanies.getSelectionModel().select(index);
            }
        }

        // Update button action
        public void updateAction()
        {
            Company company = lvwCompanies.getSelectionModel().getSelectedItem();
            if (company == null) {
                return;
            }

            if (updateDialog == null) {
                updateDialog = new CompanyDialog("Update Company");
                Stage stage = (Stage) lvwCompanies.getScene().getWindow();
                updateDialog.initOwner(stage);
            }

            updateDialog.setCompany(company);
            updateDialog.showAndWait();
            // ... wait for the dialog to close

            boolean isUpdated = updateDialog.getResult();
            if (isUpdated) {
                int selectIndex = lvwCompanies.getSelectionModel().getSelectedIndex();
                lvwCompanies.getItems().setAll(Storage.getAllCompanies());
                lvwCompanies.getSelectionModel().select(selectIndex);
            }
        }

        // Delete button action
        public void deleteAction()
        {
            Company company = lvwCompanies.getSelectionModel().getSelectedItem();
            if (company == null) {
                return;
            }

            if (company.employeesCount() == 0) {
                if (deleteAlert == null) {
                    deleteAlert = new Alert(AlertType.CONFIRMATION);
                    deleteAlert.setTitle("Confirmation");
                    deleteAlert.setHeaderText("Delete the company?");
                    deleteAlert.setContentText("Deletion can't be undone");
                    Stage stage = (Stage) lvwCompanies.getScene().getWindow();
                    deleteAlert.initOwner(stage);
                }

                Optional<ButtonType> result = deleteAlert.showAndWait();
                // ... wait for the dialog to close

                if (result.isPresent() && result.get() == ButtonType.OK) {
                    Service.deleteCompany(company);
                    lvwCompanies.getItems().setAll(Storage.getAllCompanies());
                    this.updateControls();
                }
            } else {
                Alert dialog = new Alert(AlertType.ERROR);
                dialog.setTitle("Error");
                dialog.setHeaderText("Company not deleted");
                dialog.setContentText("Can't delete a company that has employees");
                Stage stage = (Stage) lvwCompanies.getScene().getWindow();
                dialog.initOwner(stage);

                dialog.showAndWait();
                // ... wait for the dialog to close
            }
        }

        // Selected item in lvwCompanies changed
        public void selectedCompanyChanged()
        {
            this.updateControls();
        }
    }

}
